<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.5//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_5.dtd'>
<nta>
	<declaration>/**
This case study has been presented at "Model-Based Design of 
Cyber Physical Systems", Italy, October 4-5, 2018.

It is from the paper "Guaranteed Control Synthesis for Continuou
Systems in Uppaal Tiga" by Kim Guldstrand Larsen, Adrien Le Coënt, 
Marius Mikučionis, and Jakob Haahr Taankvist.

@inproceedings{larsen_guaranteed_2019,
	location = {Cham},
	title = {Guaranteed Control Synthesis for Continuous Systems in Uppaal Tiga},
	isbn = {978-3-030-23703-5},
	doi = {10.1007/978-3-030-23703-5_6},
	series = {Lecture Notes in Computer Science},
	pages = {113--133},
	booktitle = {Cyber Physical Systems. Model-Based Design},
	publisher = {Springer International Publishing},
	author = {Larsen, Kim Guldstrand and Le Coënt, Adrien and Mikučionis, Marius and Taankvist, Jakob Haahr},
	editor = {Chamberlain, Roger and Taha, Walid and Törngren, Martin},
	date = {2019},
}
*/

// Get the integer floor.
int flo(double d){
    return fint(floor(d));
}

// Get the integer ceil.
int cei(double d){
    return fint(ceil(d));
}


// Model constants.
clock time;
const int maxVelocityEgo = 20;
const int maxVelocityFront = 20;
const int minVelocityEgo = -10;
const int minVelocityFront = -10;

const int maxSensorDistance = 200;


clock waitTimer;
broadcast chan update;

// Global distance variables.
int distance_gua_new[2] = {20,20}; // minimum lower and maximum upper bound during next interfall
int distance_gua_evol_new[2] = {20,20}; // lower and upper bound at end next interfall

// Global Ego variables.
int velocityEgo_gua_new[2];// = {0,0}; // minimum lower and maximum upper bound during next interfall
int velocityEgo_gua_evol_new[2];// = {0,0}; // lower and upper bound at end next interfall
int[-2,2] accelerationEgo;
broadcast chan chooseEgo;

// Global Front variables.
int velocityFront_gua_new[2];// = {0,0}; // minimum lower and maximum upper bound during next interfall
int velocityFront_gua_evol_new[2];// = {0,0}; // lower and upper bound at end next interfall
int[-2,2] accelerationFront;
broadcast chan chooseFront;

// Euler interpretation constants.
const double period_size = 1.0;
const int euler_sub_step = 5;
const double tau = period_size/euler_sub_step;

// Get the minimal value.
double mini(double d1, double d2){
    if(d1 &lt; d2){return d1;}
    else{return d2;}
}

// Get the maximum value.
double maxi(double d1, double d2){
    if(d1 &lt; d2){return d2;}
    else{return d1;}
}

double dist_local_time(double ve0, double vf0) {
    return (ve0 - vf0) / (1.0 * (accelerationFront - accelerationEgo));
}

double dist_local_minmax(double d0, double ve0, double vf0) {
    return d0 + (accelerationFront - accelerationEgo) * pow(dist_local_time(ve0, vf0), 2) / 2.0 + (vf0 - ve0) * dist_local_time(ve0, vf0);
}

// Perform euler approximations for a single period.
void eulerDiscrete(){
    // New method variables.
    double distance_min_next, distance_max_next, velocityFront_min_next, velocityFront_max_next, velocityEgo_min_next, velocityEgo_max_next;
    double distance_min_der_0, distance_min_der_t, distance_max_der_0, distance_max_der_t;

    int i;
    
    // New method.
    velocityFront_min_next = velocityFront_gua_evol_new[0] + accelerationFront * period_size;
    velocityFront_max_next = velocityFront_gua_evol_new[1] + accelerationFront * period_size;
    velocityEgo_min_next = velocityEgo_gua_evol_new[0] + accelerationEgo * period_size;
    velocityEgo_max_next = velocityEgo_gua_evol_new[1] + accelerationEgo * period_size;
    distance_min_next = mini(distance_gua_evol_new[0] + (accelerationFront - accelerationEgo) * pow(period_size, 2) / 2.0 + (velocityFront_gua_evol_new[0] - velocityEgo_gua_evol_new[0]) * period_size, maxSensorDistance + 1);
    distance_max_next = mini(distance_gua_evol_new[1] + (accelerationFront - accelerationEgo) * pow(period_size, 2) / 2.0 + (velocityFront_gua_evol_new[1] - velocityEgo_gua_evol_new[1]) * period_size, maxSensorDistance + 1);
    
    distance_min_der_0 = velocityFront_gua_evol_new[0] - velocityEgo_gua_evol_new[0];
    distance_min_der_t = (accelerationFront - accelerationEgo) * period_size + velocityFront_gua_evol_new[0] - velocityEgo_gua_evol_new[0];
    distance_max_der_0 = velocityFront_gua_evol_new[1] - velocityEgo_gua_evol_new[1];
    distance_max_der_t = (accelerationFront - accelerationEgo) * period_size + velocityFront_gua_evol_new[1] - velocityEgo_gua_evol_new[1];

    if (accelerationFront &gt;= 0) {
        velocityFront_gua_new[0] = velocityFront_gua_evol_new[0];
        velocityFront_gua_new[1] = cei(velocityFront_max_next);
    }
    else {
        velocityFront_gua_new[0] = flo(velocityFront_min_next);
        velocityFront_gua_new[1] = velocityFront_gua_evol_new[1];
    }
    
    if (accelerationEgo &gt;= 0) {
        velocityEgo_gua_new[0] = velocityEgo_gua_evol_new[0];
        velocityEgo_gua_new[1] = cei(velocityEgo_max_next);
    }
    else {
        velocityEgo_gua_new[0] = flo(velocityEgo_min_next);
        velocityEgo_gua_new[1] = velocityEgo_gua_evol_new[1];
    }
    
    if (distance_min_der_0 &gt;= 0 &amp;&amp; distance_min_der_t &gt;= 0) {
        distance_gua_new[0] = distance_gua_evol_new[0];
    }
    else if (distance_min_der_0 &lt;= 0 &amp;&amp; distance_min_der_t &lt;= 0) {
        distance_gua_new[0] = flo(distance_min_next);
    }
    else {
        distance_gua_new[0] = flo(mini(mini(distance_gua_evol_new[0], distance_min_next), dist_local_minmax(distance_gua_evol_new[0], velocityEgo_gua_evol_new[0], velocityFront_gua_evol_new[0])));
    }
        
    if (distance_max_der_0 &gt;= 0 &amp;&amp; distance_max_der_t &gt;= 0) {
        distance_gua_new[1] = cei(distance_max_next);
    }
    else if (distance_max_der_0 &lt;= 0 &amp;&amp; distance_max_der_t &lt;= 0) {
        distance_gua_new[1] = distance_gua_evol_new[1];
    }
    else {
        distance_gua_new[1] = cei(maxi(maxi(distance_gua_evol_new[1], distance_max_next), dist_local_minmax(distance_gua_evol_new[1], velocityEgo_gua_evol_new[1], velocityFront_gua_evol_new[1])));
    }
    
    // Update bounds for next iteration.
    velocityFront_gua_evol_new[0] = flo(velocityFront_min_next);
    velocityFront_gua_evol_new[1] = cei(velocityFront_max_next);
    velocityEgo_gua_evol_new[0] = flo(velocityEgo_min_next);
    velocityEgo_gua_evol_new[1] = cei(velocityEgo_max_next);
    distance_gua_evol_new[0] = flo(distance_min_next);
    distance_gua_evol_new[1] = cei(distance_max_next);
}


// Calculate the discrete time solution after a single period (Equation 5).
void updateDiscrete(){
// Do nothing
}


// Hybrid stuff
hybrid clock rVelocityEgo;
hybrid clock rVelocityFront;
hybrid clock rDistance;
hybrid clock D;</declaration>
	<template>
		<name x="5" y="5">Ego</name>
		<location id="id0" x="195" y="34">
			<name x="228" y="25">Negative_acc</name>
		</location>
		<location id="id1" x="-204" y="-68">
			<name x="-272" y="-76">No_acc</name>
		</location>
		<location id="id2" x="-34" y="-68">
			<name x="-17" y="-76">Choose</name>
			<committed/>
		</location>
		<location id="id3" x="85" y="-187">
			<name x="75" y="-221">Positive_acc</name>
		</location>
		<init ref="id1"/>
		<transition id="id4">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="76" y="42">chooseEgo?</label>
			<nail x="68" y="0"/>
		</transition>
		<transition id="id5">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-59" y="-187">chooseEgo?</label>
			<nail x="-8" y="-161"/>
		</transition>
		<transition id="id6">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-170" y="-119">chooseEgo?</label>
			<nail x="-119" y="-102"/>
		</transition>
		<transition id="id7">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="119" y="-34">velocityEgo_gua_evol_new[0] &gt; minVelocityEgo</label>
			<label kind="assignment" x="153" y="-8">accelerationEgo = -2</label>
			<nail x="59" y="-42"/>
		</transition>
		<transition id="id8">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="68" y="-127">velocityEgo_gua_evol_new[1] &lt; maxVelocityEgo</label>
			<label kind="assignment" x="68" y="-110">accelerationEgo = 2</label>
			<nail x="59" y="-102"/>
		</transition>
		<transition id="id9">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-263" y="-25">accelerationEgo = 0</label>
			<nail x="-119" y="-34"/>
		</transition>
	</template>
	<template>
		<name>Front</name>
		<location id="id10" x="-340" y="-306">
			<name x="-331" y="-331">Faraway</name>
		</location>
		<location id="id11" x="102" y="-136">
			<name x="92" y="-170">Positive_acc</name>
		</location>
		<location id="id12" x="102" y="144">
			<name x="59" y="161">Negative_acc</name>
		</location>
		<location id="id13" x="-119" y="144">
			<name x="-170" y="161">No_acceleration</name>
		</location>
		<location id="id14" x="0" y="-34">
			<name x="17" y="-42">Choose</name>
			<committed/>
		</location>
		<location id="id15" x="-340" y="-238">
			<committed/>
		</location>
		<location id="id16" x="-340" y="-153">
			<committed/>
		</location>
		<branchpoint id="id17" x="-340" y="-195"/>
		<init ref="id13"/>
		<transition id="id18">
			<source ref="id17"/>
			<target ref="id10"/>
			<nail x="-374" y="-195"/>
			<nail x="-374" y="-306"/>
		</transition>
		<transition id="id19">
			<source ref="id17"/>
			<target ref="id16"/>
		</transition>
		<transition id="id20" controllable="false">
			<source ref="id15"/>
			<target ref="id17"/>
		</transition>
		<transition id="id21" controllable="false">
			<source ref="id12"/>
			<target ref="id10"/>
			<label kind="guard" x="-178" y="-357">distance_gua_evol_new[0] &gt; maxSensorDistance</label>
			<label kind="synchronisation" x="-178" y="-340">update?</label>
			<label kind="assignment" x="-178" y="-323">distance_gua_evol_new[0] = maxSensorDistance+1, 
distance_gua_evol_new[1] = maxSensorDistance+1,
accelerationFront = 0</label>
			<nail x="263" y="144"/>
			<nail x="263" y="-306"/>
		</transition>
		<transition id="id22" controllable="false">
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="guard" x="-204" y="-246">distance_gua_evol_new[0] &gt; maxSensorDistance</label>
			<label kind="synchronisation" x="-204" y="-229">update?</label>
			<label kind="assignment" x="-204" y="-212">distance_gua_evol_new[0] = maxSensorDistance+1,
distance_gua_evol_new[1] = maxSensorDistance+1,
accelerationFront = 0</label>
			<nail x="102" y="-229"/>
			<nail x="-204" y="-229"/>
			<nail x="-246" y="-280"/>
		</transition>
		<transition id="id23" controllable="false">
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="guard" x="-442" y="93">distance_gua_evol_new[0] &gt; maxSensorDistance</label>
			<label kind="synchronisation" x="-442" y="110">update?</label>
			<label kind="assignment" x="-442" y="127">distance_gua_evol_new[0] = maxSensorDistance+1,
accelerationFront = 0</label>
			<nail x="-451" y="144"/>
			<nail x="-391" y="-306"/>
		</transition>
		<transition id="id24" controllable="false">
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-25" y="144">chooseFront?</label>
			<nail x="-60" y="144"/>
		</transition>
		<transition id="id25" controllable="false">
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-17" y="-153">chooseFront?</label>
			<nail x="0" y="-136"/>
		</transition>
		<transition id="id26" controllable="false">
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-153" y="93">chooseFront?</label>
		</transition>
		<transition id="id27" controllable="false">
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="guard" x="8" y="51">velocityFront_gua_evol_new[0] &gt; minVelocityFront</label>
			<label kind="assignment" x="25" y="101">accelerationFront = -2</label>
		</transition>
		<transition id="id28" controllable="false">
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="guard" x="25" y="-102">velocityFront_gua_evol_new[1] &lt; maxVelocityFront</label>
			<label kind="assignment" x="25" y="-85">accelerationFront = 2</label>
		</transition>
		<transition id="id29" controllable="false">
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="assignment" x="-204" y="68">accelerationFront = 0</label>
			<nail x="-102" y="68"/>
		</transition>
		<transition id="id30" controllable="false">
			<source ref="id10"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-365" y="-280">chooseFront?</label>
		</transition>
		<transition id="id31" controllable="false">
			<source ref="id16"/>
			<target ref="id14"/>
			<label kind="select" x="-331" y="-136">i:int[minVelocityFront, maxVelocityFront]</label>
			<label kind="guard" x="-331" y="-119">i &lt;= velocityEgo_gua_evol_new[0]</label>
			<label kind="assignment" x="-331" y="-102">velocityFront_gua_evol_new[0] = flo(i),
velocityFront_gua_evol_new[1] = cei(i),
distance_gua_evol_new[0] = maxSensorDistance,
distance_gua_evol_new[1] = maxSensorDistance,
rVelocityFront = i * 1.0,
rDistance = 1.0*maxSensorDistance</label>
			<nail x="-340" y="-34"/>
		</transition>
	</template>
	<template>
		<name>Monitor</name>
		<declaration>
double distanceRate(double velFront, double velEgo, double dist){
    if (dist &gt; maxSensorDistance)
        return 0.0;
    else 
        return velFront - velEgo;
}
</declaration>
		<location id="id32" x="-153" y="-144">
			<label kind="invariant" x="-315" y="-127">rVelocityEgo' == accelerationEgo &amp;&amp;
rVelocityFront' == accelerationFront &amp;&amp;
rDistance'  == distanceRate(rVelocityFront,rVelocityEgo, rDistance) &amp;&amp;
D' == rDistance</label>
		</location>
		<location id="id33" x="-306" y="-144">
			<committed/>
		</location>
		<init ref="id33"/>
		<transition id="id34">
			<source ref="id33"/>
			<target ref="id32"/>
			<label kind="assignment" x="-289" y="-169">rDistance = 20</label>
		</transition>
	</template>
	<template>
		<name>System</name>
		<location id="id35" x="-68" y="-238">
			<name x="-85" y="-272">Done</name>
			<urgent/>
		</location>
		<location id="id36" x="-238" y="-238">
			<name x="-272" y="-272">FrontNext</name>
			<urgent/>
		</location>
		<location id="id37" x="-238" y="-187">
			<name x="-255" y="-170">Wait</name>
			<label kind="invariant" x="-280" y="-153">waitTimer &lt;= 1</label>
		</location>
		<location id="id38" x="-408" y="-238">
			<name x="-433" y="-272">EgoNext</name>
			<urgent/>
		</location>
		<init ref="id38"/>
		<transition id="id39" controllable="false">
			<source ref="id37"/>
			<target ref="id38"/>
			<label kind="guard" x="-450" y="-212">waitTimer == 1</label>
			<label kind="assignment" x="-467" y="-195">updateDiscrete()</label>
		</transition>
		<transition id="id40" controllable="false">
			<source ref="id35"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="-144" y="-212">update!</label>
			<label kind="assignment" x="-144" y="-195">waitTimer = 0,
eulerDiscrete()</label>
		</transition>
		<transition id="id41" controllable="false">
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="synchronisation" x="-204" y="-255">chooseFront!</label>
		</transition>
		<transition id="id42" controllable="false">
			<source ref="id38"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-365" y="-255">chooseEgo!</label>
		</transition>
	</template>
	<system>
system Ego, Front, System, Monitor;
    </system>
	<queries>
		<option key="--hashtable-size" value="29"/>
		<option key="--statespace-consumption" value="2"/>
		<query>
			<formula>// Simulate integer boundaries in uncontrolled system.</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=100; 1] {rDistance, distance_gua[0], distance_gua[1]}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=100; 1] {rVelocityEgo, velocityEgo_gua[0], velocityEgo_gua[1]}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=100; 1] {rVelocityFront, velocityFront_gua[0], velocityFront_gua[1]}</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>// Simulate integer boundaries in uncontrolled system with new method.</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=100; 1] {rDistance, distance_gua_new[0], distance_gua_new[1]}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=100; 1] {rVelocityEgo, velocityEgo_gua_new[0], velocityEgo_gua_new[1]}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=100; 1] {rVelocityFront, velocityFront_gua_new[0], velocityFront_gua_new[1]}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=100; 1] {rDistance, distance_gua_new[0], distance_gua_new[1], distance_gua[0], distance_gua[1], rVelocityEgo, velocityEgo_gua_new[0], velocityEgo_gua_new[1], velocityEgo_gua[0], velocityEgo_gua[1], rVelocityFront, velocityFront_gua_new[0], velocityFront_gua_new[1], velocityFront_gua[0], velocityFront_gua[1]}</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>// Calculate safe and optimal strategy.</formula>
			<comment/>
		</query>
		<query>
			<formula>strategy safe = control: A[] (distance_gua[0] &gt; 5)
			</formula>
			<comment>Takes a lot of memory unfortunately.</comment>
		</query>
		<query>
			<formula>strategy safe = control: A[] (distance_gua_new[0] &gt; 5)</formula>
			<comment/>
		</query>
		<query>
			<formula>inf{rVelocityFront - rVelocityEgo == 0}: distance under safe
			</formula>
			<comment/>
		</query>
		<query>
			<formula>strategy safeFast = minE (D) [&lt;=105]: &lt;&gt; time &gt;= 100 under safe
			</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>// Analysis of the synthesized strategies.</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=100; 10] {rDistance} under safeFast</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=100; 1] {rDistance, accelerationFront - accelerationEgo, rVelocityFront-rVelocityEgo} </formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=100; 1] {rDistance, rVelocityFront - rVelocityEgo} under safe</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=100; 1] {rVelocityFront, accelerationFront} under safe</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=100; 1] {rVelocityEgo, accelerationFront} under safe</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=100; 1] {rDistance} under safeFast
			</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
